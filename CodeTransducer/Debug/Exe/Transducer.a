;/*******************************************************
;CodeWizardAVR V3.12 Advanced
;Project :
;Version :
;Date    : 9/8/2020
;Author  : M.Mashaghi
;Company : MegaMouj
;
;Chip type               : ATmega48A
;AVR Core Clock frequency: 4.000000 MHz
;*******************************************************/
;#include <mega48a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define DataDirection PORTC.1
;
;#define _7seg1G PORTD.5
;
;#define _7seg2A PORTB.0
;#define _7seg2B PORTB.1
;#define _7seg2C PORTD.2
;#define _7seg2D PORTD.4
;#define _7seg2E PORTD.3
;#define _7seg2F PORTD.7
;#define _7seg2G PORTD.6
;#define _7seg2dp PORTC.5
;
;#define _7seg3A PORTB.4
;#define _7seg3B PORTB.5
;#define _7seg3C PORTC.2
;#define _7seg3D PORTC.3
;#define _7seg3E PORTC.4
;#define _7seg3F PORTB.3
;#define _7seg3G PORTB.2
;
;void ShowValue(signed char val);
;void ShowFloatValue(float val);
;void Report(void);
;
;unsigned char Address;
;eeprom unsigned char AddressSaved;
;unsigned char rom_codes[1][9];
;float T1, T2;
;unsigned char status;
;
;
;union
;{float f;
; unsigned long int ui32;
; unsigned int ui16[2];
; unsigned char ui8[4];
;}format_converter_32;
;
;// 1 Wire Bus interface functions
;#include <1wire.h>
;
;// DS1820 Temperature Sensor functions
;#include <ds1820.h>
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE0)
;#define RX_COMPLETE (1<<RXC0)
;#define FRAMING_ERROR (1<<FE0)
;#define PARITY_ERROR (1<<UPE0)
;#define DATA_OVERRUN (1<<DOR0)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE0 256
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0=0,rx_rd_index0=0;
;#else
;unsigned int rx_wr_index0=0,rx_rd_index0=0;
;#endif
;
;#if RX_BUFFER_SIZE0 < 256
;unsigned char rx_counter0=0;
;#else
;unsigned int rx_counter0=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0059 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 005A char status,data;
; 0000 005B status=UCSR0A;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 005C data=UDR0;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 005D if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 005E    {
; 0000 005F    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0060 #if RX_BUFFER_SIZE0 == 256
; 0000 0061    // special case for receiver buffer size=256
; 0000 0062    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0063 #else
; 0000 0064    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
; 0000 0065    if (++rx_counter0 == RX_BUFFER_SIZE0)
; 0000 0066       {
; 0000 0067       rx_counter0=0;
; 0000 0068       rx_buffer_overflow0=1;
; 0000 0069       }
; 0000 006A #endif
; 0000 006B    }
;PCODE: $00000022 VOL: 0
; 0000 006C }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0073 {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0074 char data;
; 0000 0075 while (rx_counter0==0);
;PCODE: $0000002A VOL: 0
;	data -> R17
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0076 data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0077 #if RX_BUFFER_SIZE0 != 256
; 0000 0078 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
; 0000 0079 #endif
; 0000 007A #asm("cli")
;PCODE: $00000035 VOL: 0
	cli
;PCODE: $00000036 VOL: 0
; 0000 007B --rx_counter0;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 007C #asm("sei")
;PCODE: $0000003A VOL: 0
	sei
;PCODE: $0000003B VOL: 0
; 0000 007D return data;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 007E }
;PCODE: $0000003F VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (1<<ADLAR))
;
;// Read the 8 most significant bits of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 008A {
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 008B ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000042 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 008C delay_us(10);
;PCODE: $00000046 VOL: 0
; 0000 008D ADCSRA|=(1<<ADSC);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 008E while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 008F ADCSRA|=(1<<ADIF);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0090 return ADCH;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0091 }
;PCODE: $00000056 VOL: 0
;
;void main(void)
; 0000 0094 {
;PCODE: $00000057 VOL: 0
; 0000 0095 signed char i, devices;
; 0000 0096 float f;
; 0000 0097 unsigned char analog;
; 0000 0098 
; 0000 0099 // Crystal Oscillator division factor: 1
; 0000 009A #pragma optsize-
; 0000 009B CLKPR=(1<<CLKPCE);
;PCODE: $00000058 VOL: 0
;	i -> R17
;	devices -> R16
;	f -> Y+0
;	analog -> R19
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 009C CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 009D #ifdef _OPTIMIZE_SIZE_
; 0000 009E #pragma optsize+
; 0000 009F #endif
; 0000 00A0 
; 0000 00A1 // Input/Output Ports initialization
; 0000 00A2 DDRB=0x3F;PORTB=0x3F;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00A3 DDRC=0x3E;PORTC=0x3C;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00A4 DDRD=0xFC;PORTD=0xFC;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00A5 
; 0000 00A6 // USART initialization
; 0000 00A7 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00A8 // USART Receiver: On
; 0000 00A9 // USART Transmitter: On
; 0000 00AA // USART0 Mode: Asynchronous
; 0000 00AB // USART Baud Rate: 9600
; 0000 00AC UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00AD UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00AE UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00AF UBRR0H=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00B0 UBRR0L=0x19;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00B1 
; 0000 00B2 // ADC initialization
; 0000 00B3 // ADC Clock frequency: 1000.000 kHz
; 0000 00B4 // ADC Voltage Reference: AVCC pin
; 0000 00B5 // Only the 8 most significant bits of the AD conversion result are used
; 0000 00B6 DIDR0=0;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00B7 ADMUX=ADC_VREF_TYPE;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00B8 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00B9 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00BA 
; 0000 00BB // 1 Wire Bus initialization
; 0000 00BC // 1 Wire Data port: PORTC
; 0000 00BD // 1 Wire Data bit: 0
; 0000 00BE // Note: 1 Wire port settings are specified in the
; 0000 00BF // Project|Configure|C Compiler|Libraries|1 Wire menu.
; 0000 00C0 w1_init();
;PCODE: $0000007B VOL: 0
; 0000 00C1 
; 0000 00C2 // Global enable interrupts
; 0000 00C3 #asm("sei")
;PCODE: $0000007C VOL: 0
	sei
;PCODE: $0000007D VOL: 0
; 0000 00C4 
; 0000 00C5 //RetreiveAddress();
; 0000 00C6 
; 0000 00C7 devices=w1_search(0xf0,rom_codes);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00C8 if (devices) ShowValue(15);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00C9 else ShowValue(-3);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00CA 
; 0000 00CB delay_ms(2000);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00CC //if (ds1820_init(0,-125,125,DS18B20_10BIT_RES)) ShowValue(15);
; 0000 00CD //else ShowValue(-1);
; 0000 00CE 
; 0000 00CF //while(1) {
; 0000 00D0 //ShowValue(read_adc(6)/3);
; 0000 00D1 //putchar(read_adc(6));
; 0000 00D2 //delay_ms(50);
; 0000 00D3 //}
; 0000 00D4 
; 0000 00D5 while (1)
;PCODE: $0000008E VOL: 0
; 0000 00D6     {
; 0000 00D7         T1 = ds1820_temperature_10(0);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00D8         //T1 /= 100;
; 0000 00D9         T1 /= 75; //this is so strange!!! (75 is the result of caliberation with boiling water and freezing water)
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00DA         ShowFloatValue(T1);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00DB 
; 0000 00DC 
; 0000 00DD         T2 = 0;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00DE //        analog=read_adc(6);
; 0000 00DF //        if (analog > 200) status |= 0b00000001;
; 0000 00E0 //        else if ((analog > 112)&&(analog < 140)) status |= 0b00000001;
; 0000 00E1 //        else status &= 0b11111110; //--> door is open
; 0000 00E2 
; 0000 00E3     if (read_adc(6) < 150) status |= 0b00000010; else status &= 0b11111101; //--> emergency button pressed
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00E4     if (read_adc(7) > 150) status |= 0b00000001; else status &= 0b11111110; //--> door is open
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00E5 
; 0000 00E6 //        if (analog < 138) status |= 0b00000010; else status &= 0b11111101; //--> emergency button pressed
; 0000 00E7 
; 0000 00E8         Report();
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00E9 
; 0000 00EA         delay_ms(100);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00EB     }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00EC }
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;
;void ShowValue(signed char val) {
; 0000 00EE void ShowValue(signed char val) {
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00EF     unsigned char dig2, dig3;
; 0000 00F0 
; 0000 00F1     if (val < 0) _7seg1G=0; else _7seg1G=1;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;	val -> Y+2
;	dig2 -> R17
;	dig3 -> R16
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00F2     if (val < 0) val = 0-val;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00F3 
; 0000 00F4     dig2 = val / 10;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00F5     dig3 = val % 10;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00F6 
; 0000 00F7     switch (dig2) {
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00F8         case 0: _7seg2A=0; _7seg2B=0; _7seg2C=0; _7seg2D=0; _7seg2E=0; _7seg2F=0; _7seg2G=1; _7seg2dp=1; break;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00F9         case 1: _7seg2A=1; _7seg2B=0; _7seg2C=0; _7seg2D=1; _7seg2E=1; _7seg2F=1; _7seg2G=1; _7seg2dp=1; break;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00FA         case 2: _7seg2A=0; _7seg2B=0; _7seg2C=1; _7seg2D=0; _7seg2E=0; _7seg2F=1; _7seg2G=0; _7seg2dp=1; break;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00FB         case 3: _7seg2A=0; _7seg2B=0; _7seg2C=0; _7seg2D=0; _7seg2E=1; _7seg2F=1; _7seg2G=0; _7seg2dp=1; break;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00FC         case 4: _7seg2A=1; _7seg2B=0; _7seg2C=0; _7seg2D=1; _7seg2E=1; _7seg2F=0; _7seg2G=0; _7seg2dp=1; break;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00FD         case 5: _7seg2A=0; _7seg2B=1; _7seg2C=0; _7seg2D=0; _7seg2E=1; _7seg2F=0; _7seg2G=0; _7seg2dp=1; break;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00FE         case 6: _7seg2A=0; _7seg2B=1; _7seg2C=0; _7seg2D=0; _7seg2E=0; _7seg2F=0; _7seg2G=0; _7seg2dp=1; break;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00FF         case 7: _7seg2A=0; _7seg2B=0; _7seg2C=0; _7seg2D=1; _7seg2E=1; _7seg2F=1; _7seg2G=1; _7seg2dp=1; break;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0100         case 8: _7seg2A=0; _7seg2B=0; _7seg2C=0; _7seg2D=0; _7seg2E=0; _7seg2F=0; _7seg2G=0; _7seg2dp=1; break;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0101         case 9: _7seg2A=0; _7seg2B=0; _7seg2C=0; _7seg2D=0; _7seg2E=1; _7seg2F=0; _7seg2G=0; _7seg2dp=1; break;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0102     }
;PCODE: $000001AA VOL: 0
; 0000 0103 
; 0000 0104     switch (dig3) {
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0105         case 0: _7seg3A=0; _7seg3B=0; _7seg3C=0; _7seg3D=0; _7seg3E=0; _7seg3F=0; _7seg3G=1; break;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0106         case 1: _7seg3A=1; _7seg3B=0; _7seg3C=0; _7seg3D=1; _7seg3E=1; _7seg3F=1; _7seg3G=1; break;
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0107         case 2: _7seg3A=0; _7seg3B=0; _7seg3C=1; _7seg3D=0; _7seg3E=0; _7seg3F=1; _7seg3G=0; break;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0108         case 3: _7seg3A=0; _7seg3B=0; _7seg3C=0; _7seg3D=0; _7seg3E=1; _7seg3F=1; _7seg3G=0; break;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 0109         case 4: _7seg3A=1; _7seg3B=0; _7seg3C=0; _7seg3D=1; _7seg3E=1; _7seg3F=0; _7seg3G=0; break;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 010A         case 5: _7seg3A=0; _7seg3B=1; _7seg3C=0; _7seg3D=0; _7seg3E=1; _7seg3F=0; _7seg3G=0; break;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 010B         case 6: _7seg3A=0; _7seg3B=1; _7seg3C=0; _7seg3D=0; _7seg3E=0; _7seg3F=0; _7seg3G=0; break;
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 010C         case 7: _7seg3A=0; _7seg3B=0; _7seg3C=0; _7seg3D=1; _7seg3E=1; _7seg3F=1; _7seg3G=1; break;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 010D         case 8: _7seg3A=0; _7seg3B=0; _7seg3C=0; _7seg3D=0; _7seg3E=0; _7seg3F=0; _7seg3G=0; break;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 010E         case 9: _7seg3A=0; _7seg3B=0; _7seg3C=0; _7seg3D=0; _7seg3E=1; _7seg3F=0; _7seg3G=0; break;
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 010F     }
;PCODE: $00000260 VOL: 0
; 0000 0110 
; 0000 0111 }
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;
;void ShowFloatValue(float val) {
; 0000 0113 void ShowFloatValue(float val) {
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 0114     signed int sitemp;
; 0000 0115 
; 0000 0116     sitemp = (val * 10);
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;	val -> Y+2
;	sitemp -> R16,R17
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0117     if ((sitemp > 99) || (sitemp < -99)) {
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 0118         ShowValue (sitemp / 10);
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 0119         return;
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 011A     }
; 0000 011B 
; 0000 011C     ShowValue (sitemp);
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 011D     _7seg2dp=0;
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 011E 
; 0000 011F }
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;
;void Report(void) {
; 0000 0121 void Report(void) {
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 0122     unsigned char buff[20], crc, i;
; 0000 0123     unsigned char d1, d2, d3;
; 0000 0124     unsigned int uitemp;
; 0000 0125     float ftemp;
; 0000 0126 
; 0000 0127     format_converter_32.f = T1;
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;	buff -> Y+12
;	crc -> R17
;	i -> R16
;	d1 -> R19
;	d2 -> R18
;	d3 -> R21
;	uitemp -> Y+10
;	ftemp -> Y+6
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 0128     buff[0] = format_converter_32.ui8[0];
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 0129     buff[1] = format_converter_32.ui8[1];
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 012A     buff[2] = format_converter_32.ui8[2];
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 012B     buff[3] = format_converter_32.ui8[3];
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 012C 
; 0000 012D     format_converter_32.f = T2;
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 012E     buff[4] = format_converter_32.ui8[0];
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 012F     buff[5] = format_converter_32.ui8[1];
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 0130     buff[6] = format_converter_32.ui8[2];
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0131     buff[7] = format_converter_32.ui8[3];
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 0132     buff[8] = status;
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 0133 
; 0000 0134     crc = 0;
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 0135     for (i=0; i<9; i++)
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 0136         crc ^= buff[i];
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 0138 buff[9] = crc;
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 0139 
; 0000 013A     DataDirection = 1;
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 013B 
; 0000 013C     putchar(0x84);
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 013D     putchar(0xB3);
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 013E     putchar(0xE3);
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 013F     putchar(0x75);
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0140 
; 0000 0141     for (i=0; i<10; i++)
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 0142         putchar(buff[i]);
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 0176 }
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;
