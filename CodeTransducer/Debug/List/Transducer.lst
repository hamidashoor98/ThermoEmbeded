
AVRASM ver. 2.1.30  C:\DATA\MyCurrentProjects\DrBeheshti_FridgeMonitoring\CodeTransducer\Debug\List\Transducer.asm Fri Jan 08 09:53:29 2021

C:\DATA\MyCurrentProjects\DrBeheshti_FridgeMonitoring\CodeTransducer\Debug\List\Transducer.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\DATA\MyCurrentProjects\DrBeheshti_FridgeMonitoring\CodeTransducer\Debug\List\Transducer.asm(1089): warning: Register r3 already defined by the .DEF directive
C:\DATA\MyCurrentProjects\DrBeheshti_FridgeMonitoring\CodeTransducer\Debug\List\Transducer.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\DATA\MyCurrentProjects\DrBeheshti_FridgeMonitoring\CodeTransducer\Debug\List\Transducer.asm(1091): warning: Register r5 already defined by the .DEF directive
C:\DATA\MyCurrentProjects\DrBeheshti_FridgeMonitoring\CodeTransducer\Debug\List\Transducer.asm(1092): warning: Register r7 already defined by the .DEF directive
C:\DATA\MyCurrentProjects\DrBeheshti_FridgeMonitoring\CodeTransducer\Debug\List\Transducer.asm(1093): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega48A
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega48A
                 	#pragma AVRPART MEMORY PROG_FLASH 4096
                 	#pragma AVRPART MEMORY EEPROM 256
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x02FF
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Address=R4
                 	.DEF _status=R3
                 	.DEF _rx_wr_index0=R6
                 	.DEF _rx_rd_index0=R5
                 	.DEF _rx_counter0=R7
                 	.DEF _rx_counter0_msb=R8
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c028      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 c042      	RJMP _usart_rx_isr
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
000015 cfea      	RJMP 0x00
000016 cfe9      	RJMP 0x00
000017 cfe8      	RJMP 0x00
000018 cfe7      	RJMP 0x00
000019 cfe6      	RJMP 0x00
                 
                 _tbl10_G101:
00001a 2710
00001b 03e8
00001c 0064
00001d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00001e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00001f 1000
000020 0100
000021 0010
000022 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000023 0000
000024 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000025 0004      	.DW  0x04
000026 0005      	.DW  0x05
000027 0046      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000028 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000029 94f8      	CLI
00002a 27ee      	CLR  R30
00002b bbef      	OUT  EECR,R30
00002c bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00002d e08d      	LDI  R24,(14-2)+1
00002e e0a2      	LDI  R26,2
00002f 27bb      	CLR  R27
                 __CLEAR_REG:
000030 93ed      	ST   X+,R30
000031 958a      	DEC  R24
000032 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000033 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000034 e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000035 e0a0      	LDI  R26,LOW(__SRAM_START)
000036 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000037 93ed      	ST   X+,R30
000038 9701      	SBIW R24,1
000039 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003a e4ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00003c 9185      	LPM  R24,Z+
00003d 9195      	LPM  R25,Z+
00003e 9700      	SBIW R24,0
00003f f061      	BREQ __GLOBAL_INI_END
000040 91a5      	LPM  R26,Z+
000041 91b5      	LPM  R27,Z+
000042 9005      	LPM  R0,Z+
000043 9015      	LPM  R1,Z+
000044 01bf      	MOVW R22,R30
000045 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000046 9005      	LPM  R0,Z+
000047 920d      	ST   X+,R0
000048 9701      	SBIW R24,1
000049 f7e1      	BRNE __GLOBAL_INI_LOOP
00004a 01fb      	MOVW R30,R22
00004b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00004c e0e0      	LDI  R30,__GPIOR0_INIT
00004d bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00004e efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00004f bfed      	OUT  SPL,R30
000050 e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000051 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000052 e8c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000053 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000054 c039      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x180
                 
                 	.CSEG
                 ;/*******************************************************
                 ;CodeWizardAVR V3.12 Advanced
                 ;Project :
                 ;Version :
                 ;Date    : 9/8/2020
                 ;Author  : M.Mashaghi
                 ;Company : MegaMouj
                 ;
                 ;Chip type               : ATmega48A
                 ;AVR Core Clock frequency: 4.000000 MHz
                 ;*******************************************************/
                 ;#include <mega48a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#define DataDirection PORTC.1
                 ;
                 ;#define _7seg1G PORTD.5
                 ;
                 ;#define _7seg2A PORTB.0
                 ;#define _7seg2B PORTB.1
                 ;#define _7seg2C PORTD.2
                 ;#define _7seg2D PORTD.4
                 ;#define _7seg2E PORTD.3
                 ;#define _7seg2F PORTD.7
                 ;#define _7seg2G PORTD.6
                 ;#define _7seg2dp PORTC.5
                 ;
                 ;#define _7seg3A PORTB.4
                 ;#define _7seg3B PORTB.5
                 ;#define _7seg3C PORTC.2
                 ;#define _7seg3D PORTC.3
                 ;#define _7seg3E PORTC.4
                 ;#define _7seg3F PORTB.3
                 ;#define _7seg3G PORTB.2
                 ;
                 ;void ShowValue(signed char val);
                 ;void ShowFloatValue(float val);
                 ;void Report(void);
                 ;
                 ;unsigned char Address;
                 ;eeprom unsigned char AddressSaved;
                 ;unsigned char rom_codes[1][9];
                 ;float T1, T2;
                 ;unsigned char status;
                 ;
                 ;
                 ;union
                 ;{float f;
                 ; unsigned long int ui32;
                 ; unsigned int ui16[2];
                 ; unsigned char ui8[4];
                 ;}format_converter_32;
                 ;
                 ;// 1 Wire Bus interface functions
                 ;#include <1wire.h>
                 ;
                 ;// DS1820 Temperature Sensor functions
                 ;#include <ds1820.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE0)
                 ;#define RX_COMPLETE (1<<RXC0)
                 ;#define FRAMING_ERROR (1<<FE0)
                 ;#define PARITY_ERROR (1<<UPE0)
                 ;#define DATA_OVERRUN (1<<DOR0)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE0 256
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0=0,rx_rd_index0=0;
                 ;#else
                 ;unsigned int rx_wr_index0=0,rx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE0 < 256
                 ;unsigned char rx_counter0=0;
                 ;#else
                 ;unsigned int rx_counter0=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0059 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000055 93ea      	ST   -Y,R30
000056 93fa      	ST   -Y,R31
000057 b7ef      	IN   R30,SREG
000058 93ea      	ST   -Y,R30
                 ; 0000 005A char status,data;
                 ; 0000 005B status=UCSR0A;
000059 d4f7      	RCALL __SAVELOCR2
                 ;	status -> R17
                 ;	data -> R16
00005a 9110 00c0 	LDS  R17,192
                 ; 0000 005C data=UDR0;
00005c 9100 00c6 	LDS  R16,198
                 ; 0000 005D if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00005e 2fe1      	MOV  R30,R17
00005f 71ec      	ANDI R30,LOW(0x1C)
000060 f469      	BRNE _0x3
                 ; 0000 005E    {
                 ; 0000 005F    rx_buffer0[rx_wr_index0++]=data;
000061 2de6      	MOV  R30,R6
000062 9463      	INC  R6
000063 e0f0      	LDI  R31,0
000064 56e2      	SUBI R30,LOW(-_rx_buffer0)
000065 4ffe      	SBCI R31,HIGH(-_rx_buffer0)
000066 8300      	ST   Z,R16
                 ; 0000 0060 #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0061    // special case for receiver buffer size=256
                 ; 0000 0062    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                +
000067 2de7     +MOV R30 , R7
000068 2df8     +MOV R31 , R8
                 	__GETW1R 7,8
000069 9631      	ADIW R30,1
                +
00006a 2e7e     +MOV R7 , R30
00006b 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
00006c f409      	BRNE _0x4
00006d 9af0      	SBI  0x1E,0
                 ; 0000 0063 #else
                 ; 0000 0064    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
                 ; 0000 0065    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 ; 0000 0066       {
                 ; 0000 0067       rx_counter0=0;
                 ; 0000 0068       rx_buffer_overflow0=1;
                 ; 0000 0069       }
                 ; 0000 006A #endif
                 ; 0000 006B    }
                 _0x4:
                 ; 0000 006C }
                 _0x3:
00006e 9109      	LD   R16,Y+
00006f 9119      	LD   R17,Y+
000070 91e9      	LD   R30,Y+
000071 bfef      	OUT  SREG,R30
000072 91f9      	LD   R31,Y+
000073 91e9      	LD   R30,Y+
000074 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0073 {
                 ; 0000 0074 char data;
                 ; 0000 0075 while (rx_counter0==0);
                 ;	data -> R17
                 ; 0000 0076 data=rx_buffer0[rx_rd_index0++];
                 ; 0000 0077 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0078 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 0079 #endif
                 ; 0000 007A #asm("cli")
                 ; 0000 007B --rx_counter0;
                 ; 0000 007C #asm("sei")
                 ; 0000 007D return data;
                 ; 0000 007E }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (1<<ADLAR))
                 ;
                 ;// Read the 8 most significant bits of the AD conversion result
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 008A {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 008B ADMUX=adc_input | ADC_VREF_TYPE;
000075 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000076 81e8      	LD   R30,Y
000077 66e0      	ORI  R30,LOW(0x60)
000078 93e0 007c 	STS  124,R30
                 ; 0000 008C delay_us(10);
                +
00007a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00007b 958a     +DEC R24
00007c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ; 0000 008D ADCSRA|=(1<<ADSC);
00007d 91e0 007a 	LDS  R30,122
00007f 64e0      	ORI  R30,0x40
000080 93e0 007a 	STS  122,R30
                 ; 0000 008E while ((ADCSRA & (1<<ADIF))==0);
                 _0xA:
000082 91e0 007a 	LDS  R30,122
000084 71e0      	ANDI R30,LOW(0x10)
000085 f3e1      	BREQ _0xA
                 ; 0000 008F ADCSRA|=(1<<ADIF);
000086 91e0 007a 	LDS  R30,122
000088 61e0      	ORI  R30,0x10
000089 93e0 007a 	STS  122,R30
                 ; 0000 0090 return ADCH;
00008b 91e0 0079 	LDS  R30,121
00008d c21e      	RJMP _0x2080001
                 ; 0000 0091 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0094 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0095 signed char i, devices;
                 ; 0000 0096 float f;
                 ; 0000 0097 unsigned char analog;
                 ; 0000 0098 
                 ; 0000 0099 // Crystal Oscillator division factor: 1
                 ; 0000 009A #pragma optsize-
                 ; 0000 009B CLKPR=(1<<CLKPCE);
00008e 9724      	SBIW R28,4
                 ;	i -> R17
                 ;	devices -> R16
                 ;	f -> Y+0
                 ;	analog -> R19
00008f e8e0      	LDI  R30,LOW(128)
000090 93e0 0061 	STS  97,R30
                 ; 0000 009C CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000092 e0e0      	LDI  R30,LOW(0)
000093 93e0 0061 	STS  97,R30
                 ; 0000 009D #ifdef _OPTIMIZE_SIZE_
                 ; 0000 009E #pragma optsize+
                 ; 0000 009F #endif
                 ; 0000 00A0 
                 ; 0000 00A1 // Input/Output Ports initialization
                 ; 0000 00A2 DDRB=0x3F;PORTB=0x3F;
000095 e3ef      	LDI  R30,LOW(63)
000096 b9e4      	OUT  0x4,R30
000097 b9e5      	OUT  0x5,R30
                 ; 0000 00A3 DDRC=0x3E;PORTC=0x3C;
000098 e3ee      	LDI  R30,LOW(62)
000099 b9e7      	OUT  0x7,R30
00009a e3ec      	LDI  R30,LOW(60)
00009b b9e8      	OUT  0x8,R30
                 ; 0000 00A4 DDRD=0xFC;PORTD=0xFC;
00009c efec      	LDI  R30,LOW(252)
00009d b9ea      	OUT  0xA,R30
00009e b9eb      	OUT  0xB,R30
                 ; 0000 00A5 
                 ; 0000 00A6 // USART initialization
                 ; 0000 00A7 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00A8 // USART Receiver: On
                 ; 0000 00A9 // USART Transmitter: On
                 ; 0000 00AA // USART0 Mode: Asynchronous
                 ; 0000 00AB // USART Baud Rate: 9600
                 ; 0000 00AC UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
00009f e0e0      	LDI  R30,LOW(0)
0000a0 93e0 00c0 	STS  192,R30
                 ; 0000 00AD UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0000a2 e9e8      	LDI  R30,LOW(152)
0000a3 93e0 00c1 	STS  193,R30
                 ; 0000 00AE UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
0000a5 e0e6      	LDI  R30,LOW(6)
0000a6 93e0 00c2 	STS  194,R30
                 ; 0000 00AF UBRR0H=0x00;
0000a8 e0e0      	LDI  R30,LOW(0)
0000a9 93e0 00c5 	STS  197,R30
                 ; 0000 00B0 UBRR0L=0x19;
0000ab e1e9      	LDI  R30,LOW(25)
0000ac 93e0 00c4 	STS  196,R30
                 ; 0000 00B1 
                 ; 0000 00B2 // ADC initialization
                 ; 0000 00B3 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 00B4 // ADC Voltage Reference: AVCC pin
                 ; 0000 00B5 // Only the 8 most significant bits of the AD conversion result are used
                 ; 0000 00B6 DIDR0=0;
0000ae e0e0      	LDI  R30,LOW(0)
0000af 93e0 007e 	STS  126,R30
                 ; 0000 00B7 ADMUX=ADC_VREF_TYPE;
0000b1 e6e0      	LDI  R30,LOW(96)
0000b2 93e0 007c 	STS  124,R30
                 ; 0000 00B8 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
0000b4 e8e2      	LDI  R30,LOW(130)
0000b5 93e0 007a 	STS  122,R30
                 ; 0000 00B9 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 93e0 007b 	STS  123,R30
                 ; 0000 00BA 
                 ; 0000 00BB // 1 Wire Bus initialization
                 ; 0000 00BC // 1 Wire Data port: PORTC
                 ; 0000 00BD // 1 Wire Data bit: 0
                 ; 0000 00BE // Note: 1 Wire port settings are specified in the
                 ; 0000 00BF // Project|Configure|C Compiler|Libraries|1 Wire menu.
                 ; 0000 00C0 w1_init();
0000ba d235      	RCALL _w1_init
                 ; 0000 00C1 
                 ; 0000 00C2 // Global enable interrupts
                 ; 0000 00C3 #asm("sei")
0000bb 9478      	sei
                 ; 0000 00C4 
                 ; 0000 00C5 //RetreiveAddress();
                 ; 0000 00C6 
                 ; 0000 00C7 devices=w1_search(0xf0,rom_codes);
0000bc efe0      	LDI  R30,LOW(240)
0000bd 93ea      	ST   -Y,R30
0000be e8a0      	LDI  R26,LOW(_rom_codes)
0000bf e0b1      	LDI  R27,HIGH(_rom_codes)
0000c0 d27f      	RCALL _w1_search
0000c1 2f0e      	MOV  R16,R30
                 ; 0000 00C8 if (devices) ShowValue(15);
0000c2 3000      	CPI  R16,0
0000c3 f011      	BREQ _0xD
0000c4 e0af      	LDI  R26,LOW(15)
0000c5 c001      	RJMP _0x171
                 ; 0000 00C9 else ShowValue(-3);
                 _0xD:
0000c6 efad      	LDI  R26,LOW(253)
                 _0x171:
0000c7 d03c      	RCALL _ShowValue
                 ; 0000 00CA 
                 ; 0000 00CB delay_ms(2000);
0000c8 eda0      	LDI  R26,LOW(2000)
0000c9 e0b7      	LDI  R27,HIGH(2000)
0000ca d21b      	RCALL _delay_ms
                 ; 0000 00CC //if (ds1820_init(0,-125,125,DS18B20_10BIT_RES)) ShowValue(15);
                 ; 0000 00CD //else ShowValue(-1);
                 ; 0000 00CE 
                 ; 0000 00CF //while(1) {
                 ; 0000 00D0 //ShowValue(read_adc(6)/3);
                 ; 0000 00D1 //putchar(read_adc(6));
                 ; 0000 00D2 //delay_ms(50);
                 ; 0000 00D3 //}
                 ; 0000 00D4 
                 ; 0000 00D5 while (1)
                 _0xF:
                 ; 0000 00D6     {
                 ; 0000 00D7         T1 = ds1820_temperature_10(0);
0000cb e0a0      	LDI  R26,LOW(0)
0000cc e0b0      	LDI  R27,0
0000cd d1b0      	RCALL _ds1820_temperature_10
0000ce e8a9      	LDI  R26,LOW(_T1)
0000cf e0b1      	LDI  R27,HIGH(_T1)
0000d0 d427      	RCALL __CWD1
0000d1 d359      	RCALL __CDF1
0000d2 d470      	RCALL __PUTDP1
                 ; 0000 00D8         //T1 /= 100;
                 ; 0000 00D9         T1 /= 75; //this is so strange!!! (75 is the result of caliberation with boiling water and freezing water)
0000d3 d1da      	RCALL SUBOPT_0x0
                +
0000d4 e0e0     +LDI R30 , LOW ( 0x42960000 )
0000d5 e0f0     +LDI R31 , HIGH ( 0x42960000 )
0000d6 e966     +LDI R22 , BYTE3 ( 0x42960000 )
0000d7 e472     +LDI R23 , BYTE4 ( 0x42960000 )
                 	__GETD1N 0x42960000
0000d8 d3ce      	RCALL __DIVF21
0000d9 93e0 0189 	STS  _T1,R30
0000db 93f0 018a 	STS  _T1+1,R31
0000dd 9360 018b 	STS  _T1+2,R22
0000df 9370 018c 	STS  _T1+3,R23
                 ; 0000 00DA         ShowFloatValue(T1);
0000e1 d1cc      	RCALL SUBOPT_0x0
0000e2 d0ea      	RCALL _ShowFloatValue
                 ; 0000 00DB 
                 ; 0000 00DC 
                 ; 0000 00DD         T2 = 0;
0000e3 e0e0      	LDI  R30,LOW(0)
0000e4 93e0 018d 	STS  _T2,R30
0000e6 93e0 018e 	STS  _T2+1,R30
0000e8 93e0 018f 	STS  _T2+2,R30
0000ea 93e0 0190 	STS  _T2+3,R30
                 ; 0000 00DE //        analog=read_adc(6);
                 ; 0000 00DF //        if (analog > 200) status |= 0b00000001;
                 ; 0000 00E0 //        else if ((analog > 112)&&(analog < 140)) status |= 0b00000001;
                 ; 0000 00E1 //        else status &= 0b11111110; //--> door is open
                 ; 0000 00E2 
                 ; 0000 00E3     if (read_adc(6) < 150) status |= 0b00000010; else status &= 0b11111101; //--> emergency button pressed
0000ec e0a6      	LDI  R26,LOW(6)
0000ed df87      	RCALL _read_adc
0000ee 39e6      	CPI  R30,LOW(0x96)
0000ef f418      	BRSH _0x12
0000f0 e0e2      	LDI  R30,LOW(2)
0000f1 2a3e      	OR   R3,R30
0000f2 c002      	RJMP _0x13
                 _0x12:
0000f3 efed      	LDI  R30,LOW(253)
0000f4 223e      	AND  R3,R30
                 ; 0000 00E4     if (read_adc(7) > 150) status |= 0b00000001; else status &= 0b11111110; //--> door is open
                 _0x13:
0000f5 e0a7      	LDI  R26,LOW(7)
0000f6 df7e      	RCALL _read_adc
0000f7 39e7      	CPI  R30,LOW(0x97)
0000f8 f018      	BRLO _0x14
0000f9 e0e1      	LDI  R30,LOW(1)
0000fa 2a3e      	OR   R3,R30
0000fb c002      	RJMP _0x15
                 _0x14:
0000fc efee      	LDI  R30,LOW(254)
0000fd 223e      	AND  R3,R30
                 ; 0000 00E5 
                 ; 0000 00E6 //        if (analog < 138) status |= 0b00000010; else status &= 0b11111101; //--> emergency button pressed
                 ; 0000 00E7 
                 ; 0000 00E8         Report();
                 _0x15:
0000fe d0f0      	RCALL _Report
                 ; 0000 00E9 
                 ; 0000 00EA         delay_ms(100);
0000ff e6a4      	LDI  R26,LOW(100)
000100 e0b0      	LDI  R27,0
000101 d1e4      	RCALL _delay_ms
                 ; 0000 00EB     }
000102 cfc8      	RJMP _0xF
                 ; 0000 00EC }
                 _0x16:
000103 cfff      	RJMP _0x16
                 ; .FEND
                 ;
                 ;void ShowValue(signed char val) {
                 ; 0000 00EE void ShowValue(signed char val) {
                 _ShowValue:
                 ; .FSTART _ShowValue
                 ; 0000 00EF     unsigned char dig2, dig3;
                 ; 0000 00F0 
                 ; 0000 00F1     if (val < 0) _7seg1G=0; else _7seg1G=1;
000104 93aa      	ST   -Y,R26
000105 d44b      	RCALL __SAVELOCR2
                 ;	val -> Y+2
                 ;	dig2 -> R17
                 ;	dig3 -> R16
000106 81aa      	LDD  R26,Y+2
000107 30a0      	CPI  R26,0
000108 f414      	BRGE _0x17
000109 985d      	CBI  0xB,5
00010a c001      	RJMP _0x1A
                 _0x17:
00010b 9a5d      	SBI  0xB,5
                 ; 0000 00F2     if (val < 0) val = 0-val;
                 _0x1A:
00010c 81aa      	LDD  R26,Y+2
00010d 30a0      	CPI  R26,0
00010e f41c      	BRGE _0x1D
00010f e0e0      	LDI  R30,LOW(0)
000110 1bea      	SUB  R30,R26
000111 83ea      	STD  Y+2,R30
                 ; 0000 00F3 
                 ; 0000 00F4     dig2 = val / 10;
                 _0x1D:
000112 d1a4      	RCALL SUBOPT_0x1
000113 d40e      	RCALL __DIVW21
000114 2f1e      	MOV  R17,R30
                 ; 0000 00F5     dig3 = val % 10;
000115 d1a1      	RCALL SUBOPT_0x1
000116 d410      	RCALL __MODW21
000117 2f0e      	MOV  R16,R30
                 ; 0000 00F6 
                 ; 0000 00F7     switch (dig2) {
000118 2fe1      	MOV  R30,R17
000119 e0f0      	LDI  R31,0
                 ; 0000 00F8         case 0: _7seg2A=0; _7seg2B=0; _7seg2C=0; _7seg2D=0; _7seg2E=0; _7seg2F=0; _7seg2G=1; _7seg2dp=1; break;
00011a 9730      	SBIW R30,0
00011b f431      	BRNE _0x21
00011c d1a1      	RCALL SUBOPT_0x2
00011d d1a3      	RCALL SUBOPT_0x3
00011e 985b      	CBI  0xB,3
00011f 985f      	CBI  0xB,7
000120 9a5e      	SBI  0xB,6
000121 c04f      	RJMP _0x172
                 ; 0000 00F9         case 1: _7seg2A=1; _7seg2B=0; _7seg2C=0; _7seg2D=1; _7seg2E=1; _7seg2F=1; _7seg2G=1; _7seg2dp=1; break;
                 _0x21:
000122 30e1      	CPI  R30,LOW(0x1)
000123 e0a0      	LDI  R26,HIGH(0x1)
000124 07fa      	CPC  R31,R26
000125 f429      	BRNE _0x32
000126 d19d      	RCALL SUBOPT_0x4
000127 9a5b      	SBI  0xB,3
000128 9a5f      	SBI  0xB,7
000129 9a5e      	SBI  0xB,6
00012a c046      	RJMP _0x172
                 ; 0000 00FA         case 2: _7seg2A=0; _7seg2B=0; _7seg2C=1; _7seg2D=0; _7seg2E=0; _7seg2F=1; _7seg2G=0; _7seg2dp=1; break;
                 _0x32:
00012b 30e2      	CPI  R30,LOW(0x2)
00012c e0a0      	LDI  R26,HIGH(0x2)
00012d 07fa      	CPC  R31,R26
00012e f431      	BRNE _0x43
00012f d18e      	RCALL SUBOPT_0x2
000130 9a5a      	SBI  0xB,2
000131 985c      	CBI  0xB,4
000132 985b      	CBI  0xB,3
000133 9a5f      	SBI  0xB,7
000134 c03b      	RJMP _0x173
                 ; 0000 00FB         case 3: _7seg2A=0; _7seg2B=0; _7seg2C=0; _7seg2D=0; _7seg2E=1; _7seg2F=1; _7seg2G=0; _7seg2dp=1; break;
                 _0x43:
000135 30e3      	CPI  R30,LOW(0x3)
000136 e0a0      	LDI  R26,HIGH(0x3)
000137 07fa      	CPC  R31,R26
000138 f429      	BRNE _0x54
000139 d184      	RCALL SUBOPT_0x2
00013a d186      	RCALL SUBOPT_0x3
00013b 9a5b      	SBI  0xB,3
00013c 9a5f      	SBI  0xB,7
00013d c032      	RJMP _0x173
                 ; 0000 00FC         case 4: _7seg2A=1; _7seg2B=0; _7seg2C=0; _7seg2D=1; _7seg2E=1; _7seg2F=0; _7seg2G=0; _7seg2dp=1; break;
                 _0x54:
00013e 30e4      	CPI  R30,LOW(0x4)
00013f e0a0      	LDI  R26,HIGH(0x4)
000140 07fa      	CPC  R31,R26
000141 f411      	BRNE _0x65
000142 d181      	RCALL SUBOPT_0x4
000143 c02a      	RJMP _0x174
                 ; 0000 00FD         case 5: _7seg2A=0; _7seg2B=1; _7seg2C=0; _7seg2D=0; _7seg2E=1; _7seg2F=0; _7seg2G=0; _7seg2dp=1; break;
                 _0x65:
000144 30e5      	CPI  R30,LOW(0x5)
000145 e0a0      	LDI  R26,HIGH(0x5)
000146 07fa      	CPC  R31,R26
000147 f419      	BRNE _0x76
000148 9828      	CBI  0x5,0
000149 9a29      	SBI  0x5,1
00014a c021      	RJMP _0x175
                 ; 0000 00FE         case 6: _7seg2A=0; _7seg2B=1; _7seg2C=0; _7seg2D=0; _7seg2E=0; _7seg2F=0; _7seg2G=0; _7seg2dp=1; break;
                 _0x76:
00014b 30e6      	CPI  R30,LOW(0x6)
00014c e0a0      	LDI  R26,HIGH(0x6)
00014d 07fa      	CPC  R31,R26
00014e f429      	BRNE _0x87
00014f 9828      	CBI  0x5,0
000150 9a29      	SBI  0x5,1
000151 d16f      	RCALL SUBOPT_0x3
000152 985b      	CBI  0xB,3
000153 c01b      	RJMP _0x176
                 ; 0000 00FF         case 7: _7seg2A=0; _7seg2B=0; _7seg2C=0; _7seg2D=1; _7seg2E=1; _7seg2F=1; _7seg2G=1; _7seg2dp=1; break;
                 _0x87:
000154 30e7      	CPI  R30,LOW(0x7)
000155 e0a0      	LDI  R26,HIGH(0x7)
000156 07fa      	CPC  R31,R26
000157 f439      	BRNE _0x98
000158 d165      	RCALL SUBOPT_0x2
000159 985a      	CBI  0xB,2
00015a 9a5c      	SBI  0xB,4
00015b 9a5b      	SBI  0xB,3
00015c 9a5f      	SBI  0xB,7
00015d 9a5e      	SBI  0xB,6
00015e c012      	RJMP _0x172
                 ; 0000 0100         case 8: _7seg2A=0; _7seg2B=0; _7seg2C=0; _7seg2D=0; _7seg2E=0; _7seg2F=0; _7seg2G=0; _7seg2dp=1; break;
                 _0x98:
00015f 30e8      	CPI  R30,LOW(0x8)
000160 e0a0      	LDI  R26,HIGH(0x8)
000161 07fa      	CPC  R31,R26
000162 f421      	BRNE _0xA9
000163 d15a      	RCALL SUBOPT_0x2
000164 d15c      	RCALL SUBOPT_0x3
000165 985b      	CBI  0xB,3
000166 c008      	RJMP _0x176
                 ; 0000 0101         case 9: _7seg2A=0; _7seg2B=0; _7seg2C=0; _7seg2D=0; _7seg2E=1; _7seg2F=0; _7seg2G=0; _7seg2dp=1; break;
                 _0xA9:
000167 30e9      	CPI  R30,LOW(0x9)
000168 e0a0      	LDI  R26,HIGH(0x9)
000169 07fa      	CPC  R31,R26
00016a f439      	BRNE _0x20
00016b d152      	RCALL SUBOPT_0x2
                 _0x175:
00016c 985a      	CBI  0xB,2
00016d 985c      	CBI  0xB,4
                 _0x174:
00016e 9a5b      	SBI  0xB,3
                 _0x176:
00016f 985f      	CBI  0xB,7
                 _0x173:
000170 985e      	CBI  0xB,6
                 _0x172:
000171 9a45      	SBI  0x8,5
                 ; 0000 0102     }
                 _0x20:
                 ; 0000 0103 
                 ; 0000 0104     switch (dig3) {
000172 2fe0      	MOV  R30,R16
000173 e0f0      	LDI  R31,0
                 ; 0000 0105         case 0: _7seg3A=0; _7seg3B=0; _7seg3C=0; _7seg3D=0; _7seg3E=0; _7seg3F=0; _7seg3G=1; break;
000174 9730      	SBIW R30,0
000175 f431      	BRNE _0xCE
000176 d152      	RCALL SUBOPT_0x5
000177 d154      	RCALL SUBOPT_0x6
000178 9844      	CBI  0x8,4
000179 982b      	CBI  0x5,3
00017a 9a2a      	SBI  0x5,2
00017b c04f      	RJMP _0xCD
                 ; 0000 0106         case 1: _7seg3A=1; _7seg3B=0; _7seg3C=0; _7seg3D=1; _7seg3E=1; _7seg3F=1; _7seg3G=1; break;
                 _0xCE:
00017c 30e1      	CPI  R30,LOW(0x1)
00017d e0a0      	LDI  R26,HIGH(0x1)
00017e 07fa      	CPC  R31,R26
00017f f429      	BRNE _0xDD
000180 d14e      	RCALL SUBOPT_0x7
000181 9a44      	SBI  0x8,4
000182 9a2b      	SBI  0x5,3
000183 9a2a      	SBI  0x5,2
000184 c046      	RJMP _0xCD
                 ; 0000 0107         case 2: _7seg3A=0; _7seg3B=0; _7seg3C=1; _7seg3D=0; _7seg3E=0; _7seg3F=1; _7seg3G=0; break;
                 _0xDD:
000185 30e2      	CPI  R30,LOW(0x2)
000186 e0a0      	LDI  R26,HIGH(0x2)
000187 07fa      	CPC  R31,R26
000188 f431      	BRNE _0xEC
000189 d13f      	RCALL SUBOPT_0x5
00018a 9a42      	SBI  0x8,2
00018b 9843      	CBI  0x8,3
00018c 9844      	CBI  0x8,4
00018d 9a2b      	SBI  0x5,3
00018e c03b      	RJMP _0x177
                 ; 0000 0108         case 3: _7seg3A=0; _7seg3B=0; _7seg3C=0; _7seg3D=0; _7seg3E=1; _7seg3F=1; _7seg3G=0; break;
                 _0xEC:
00018f 30e3      	CPI  R30,LOW(0x3)
000190 e0a0      	LDI  R26,HIGH(0x3)
000191 07fa      	CPC  R31,R26
000192 f429      	BRNE _0xFB
000193 d135      	RCALL SUBOPT_0x5
000194 d137      	RCALL SUBOPT_0x6
000195 9a44      	SBI  0x8,4
000196 9a2b      	SBI  0x5,3
000197 c032      	RJMP _0x177
                 ; 0000 0109         case 4: _7seg3A=1; _7seg3B=0; _7seg3C=0; _7seg3D=1; _7seg3E=1; _7seg3F=0; _7seg3G=0; break;
                 _0xFB:
000198 30e4      	CPI  R30,LOW(0x4)
000199 e0a0      	LDI  R26,HIGH(0x4)
00019a 07fa      	CPC  R31,R26
00019b f411      	BRNE _0x10A
00019c d132      	RCALL SUBOPT_0x7
00019d c02a      	RJMP _0x178
                 ; 0000 010A         case 5: _7seg3A=0; _7seg3B=1; _7seg3C=0; _7seg3D=0; _7seg3E=1; _7seg3F=0; _7seg3G=0; break;
                 _0x10A:
00019e 30e5      	CPI  R30,LOW(0x5)
00019f e0a0      	LDI  R26,HIGH(0x5)
0001a0 07fa      	CPC  R31,R26
0001a1 f419      	BRNE _0x119
0001a2 982c      	CBI  0x5,4
0001a3 9a2d      	SBI  0x5,5
0001a4 c021      	RJMP _0x179
                 ; 0000 010B         case 6: _7seg3A=0; _7seg3B=1; _7seg3C=0; _7seg3D=0; _7seg3E=0; _7seg3F=0; _7seg3G=0; break;
                 _0x119:
0001a5 30e6      	CPI  R30,LOW(0x6)
0001a6 e0a0      	LDI  R26,HIGH(0x6)
0001a7 07fa      	CPC  R31,R26
0001a8 f429      	BRNE _0x128
0001a9 982c      	CBI  0x5,4
0001aa 9a2d      	SBI  0x5,5
0001ab d120      	RCALL SUBOPT_0x6
0001ac 9844      	CBI  0x8,4
0001ad c01b      	RJMP _0x17A
                 ; 0000 010C         case 7: _7seg3A=0; _7seg3B=0; _7seg3C=0; _7seg3D=1; _7seg3E=1; _7seg3F=1; _7seg3G=1; break;
                 _0x128:
0001ae 30e7      	CPI  R30,LOW(0x7)
0001af e0a0      	LDI  R26,HIGH(0x7)
0001b0 07fa      	CPC  R31,R26
0001b1 f439      	BRNE _0x137
0001b2 d116      	RCALL SUBOPT_0x5
0001b3 9842      	CBI  0x8,2
0001b4 9a43      	SBI  0x8,3
0001b5 9a44      	SBI  0x8,4
0001b6 9a2b      	SBI  0x5,3
0001b7 9a2a      	SBI  0x5,2
0001b8 c012      	RJMP _0xCD
                 ; 0000 010D         case 8: _7seg3A=0; _7seg3B=0; _7seg3C=0; _7seg3D=0; _7seg3E=0; _7seg3F=0; _7seg3G=0; break;
                 _0x137:
0001b9 30e8      	CPI  R30,LOW(0x8)
0001ba e0a0      	LDI  R26,HIGH(0x8)
0001bb 07fa      	CPC  R31,R26
0001bc f421      	BRNE _0x146
0001bd d10b      	RCALL SUBOPT_0x5
0001be d10d      	RCALL SUBOPT_0x6
0001bf 9844      	CBI  0x8,4
0001c0 c008      	RJMP _0x17A
                 ; 0000 010E         case 9: _7seg3A=0; _7seg3B=0; _7seg3C=0; _7seg3D=0; _7seg3E=1; _7seg3F=0; _7seg3G=0; break;
                 _0x146:
0001c1 30e9      	CPI  R30,LOW(0x9)
0001c2 e0a0      	LDI  R26,HIGH(0x9)
0001c3 07fa      	CPC  R31,R26
0001c4 f431      	BRNE _0xCD
0001c5 d103      	RCALL SUBOPT_0x5
                 _0x179:
0001c6 9842      	CBI  0x8,2
0001c7 9843      	CBI  0x8,3
                 _0x178:
0001c8 9a44      	SBI  0x8,4
                 _0x17A:
0001c9 982b      	CBI  0x5,3
                 _0x177:
0001ca 982a      	CBI  0x5,2
                 ; 0000 010F     }
                 _0xCD:
                 ; 0000 0110 
                 ; 0000 0111 }
0001cb d38c      	RCALL __LOADLOCR2
0001cc c08b      	RJMP _0x2080006
                 ; .FEND
                 ;
                 ;void ShowFloatValue(float val) {
                 ; 0000 0113 void ShowFloatValue(float val) {
                 _ShowFloatValue:
                 ; .FSTART _ShowFloatValue
                 ; 0000 0114     signed int sitemp;
                 ; 0000 0115 
                 ; 0000 0116     sitemp = (val * 10);
0001cd d37a      	RCALL __PUTPARD2
0001ce d382      	RCALL __SAVELOCR2
                 ;	val -> Y+2
                 ;	sitemp -> R16,R17
                +
0001cf 81aa     +LDD R26 , Y + 2
0001d0 81bb     +LDD R27 , Y + 2 + 1
0001d1 818c     +LDD R24 , Y + 2 + 2
0001d2 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
                +
0001d3 e0e0     +LDI R30 , LOW ( 0x41200000 )
0001d4 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0001d5 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0001d6 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0001d7 d281      	RCALL __MULF12
0001d8 d21b      	RCALL __CFD1
0001d9 018f      	MOVW R16,R30
                 ; 0000 0117     if ((sitemp > 99) || (sitemp < -99)) {
                +
0001da 3604     +CPI R16 , LOW ( 100 )
0001db e0e0     +LDI R30 , HIGH ( 100 )
0001dc 071e     +CPC R17 , R30
                 	__CPWRN 16,17,100
0001dd f424      	BRGE _0x165
                +
0001de 390d     +CPI R16 , LOW ( - 99 )
0001df efef     +LDI R30 , HIGH ( - 99 )
0001e0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,-99
0001e1 f444      	BRGE _0x164
                 _0x165:
                 ; 0000 0118         ShowValue (sitemp / 10);
0001e2 01d8      	MOVW R26,R16
0001e3 e0ea      	LDI  R30,LOW(10)
0001e4 e0f0      	LDI  R31,HIGH(10)
0001e5 d33c      	RCALL __DIVW21
0001e6 2fae      	MOV  R26,R30
0001e7 df1c      	RCALL _ShowValue
                 ; 0000 0119         return;
0001e8 d36f      	RCALL __LOADLOCR2
0001e9 c092      	RJMP _0x2080004
                 ; 0000 011A     }
                 ; 0000 011B 
                 ; 0000 011C     ShowValue (sitemp);
                 _0x164:
0001ea 2fa0      	MOV  R26,R16
0001eb df18      	RCALL _ShowValue
                 ; 0000 011D     _7seg2dp=0;
0001ec 9845      	CBI  0x8,5
                 ; 0000 011E 
                 ; 0000 011F }
0001ed d36a      	RCALL __LOADLOCR2
0001ee c08d      	RJMP _0x2080004
                 ; .FEND
                 ;
                 ;void Report(void) {
                 ; 0000 0121 void Report(void) {
                 _Report:
                 ; .FSTART _Report
                 ; 0000 0122     unsigned char buff[20], crc, i;
                 ; 0000 0123     unsigned char d1, d2, d3;
                 ; 0000 0124     unsigned int uitemp;
                 ; 0000 0125     float ftemp;
                 ; 0000 0126 
                 ; 0000 0127     format_converter_32.f = T1;
0001ef 976a      	SBIW R28,26
0001f0 d35c      	RCALL __SAVELOCR6
                 ;	buff -> Y+12
                 ;	crc -> R17
                 ;	i -> R16
                 ;	d1 -> R19
                 ;	d2 -> R18
                 ;	d3 -> R21
                 ;	uitemp -> Y+10
                 ;	ftemp -> Y+6
0001f1 91e0 0189 	LDS  R30,_T1
0001f3 91f0 018a 	LDS  R31,_T1+1
0001f5 9160 018b 	LDS  R22,_T1+2
0001f7 9170 018c 	LDS  R23,_T1+3
0001f9 d0da      	RCALL SUBOPT_0x8
                 ; 0000 0128     buff[0] = format_converter_32.ui8[0];
0001fa 87ec      	STD  Y+12,R30
                 ; 0000 0129     buff[1] = format_converter_32.ui8[1];
                +
0001fb 91e0 0192+LDS R30 , _format_converter_32 + ( 1 )
                 	__GETB1MN _format_converter_32,1
0001fd 87ed      	STD  Y+13,R30
                 ; 0000 012A     buff[2] = format_converter_32.ui8[2];
                +
0001fe 91e0 0193+LDS R30 , _format_converter_32 + ( 2 )
                 	__GETB1MN _format_converter_32,2
000200 87ee      	STD  Y+14,R30
                 ; 0000 012B     buff[3] = format_converter_32.ui8[3];
                +
000201 91e0 0194+LDS R30 , _format_converter_32 + ( 3 )
                 	__GETB1MN _format_converter_32,3
000203 87ef      	STD  Y+15,R30
                 ; 0000 012C 
                 ; 0000 012D     format_converter_32.f = T2;
000204 91e0 018d 	LDS  R30,_T2
000206 91f0 018e 	LDS  R31,_T2+1
000208 9160 018f 	LDS  R22,_T2+2
00020a 9170 0190 	LDS  R23,_T2+3
00020c d0c7      	RCALL SUBOPT_0x8
                 ; 0000 012E     buff[4] = format_converter_32.ui8[0];
00020d 8be8      	STD  Y+16,R30
                 ; 0000 012F     buff[5] = format_converter_32.ui8[1];
                +
00020e 91e0 0192+LDS R30 , _format_converter_32 + ( 1 )
                 	__GETB1MN _format_converter_32,1
000210 8be9      	STD  Y+17,R30
                 ; 0000 0130     buff[6] = format_converter_32.ui8[2];
                +
000211 91e0 0193+LDS R30 , _format_converter_32 + ( 2 )
                 	__GETB1MN _format_converter_32,2
000213 8bea      	STD  Y+18,R30
                 ; 0000 0131     buff[7] = format_converter_32.ui8[3];
                +
000214 91e0 0194+LDS R30 , _format_converter_32 + ( 3 )
                 	__GETB1MN _format_converter_32,3
000216 8beb      	STD  Y+19,R30
                 ; 0000 0132     buff[8] = status;
000217 01fe      	MOVW R30,R28
000218 9674      	ADIW R30,20
000219 8230      	ST   Z,R3
                 ; 0000 0133 
                 ; 0000 0134     crc = 0;
00021a e010      	LDI  R17,LOW(0)
                 ; 0000 0135     for (i=0; i<9; i++)
00021b e000      	LDI  R16,LOW(0)
                 _0x16A:
00021c 3009      	CPI  R16,9
00021d f428      	BRSH _0x16B
                 ; 0000 0136         crc ^= buff[i];
00021e d0c0      	RCALL SUBOPT_0x9
00021f 91ec      	LD   R30,X
000220 271e      	EOR  R17,R30
000221 5f0f      	SUBI R16,-1
000222 cff9      	RJMP _0x16A
                 _0x16B:
                 ; 0000 0138 buff[9] = crc;
000223 01fe      	MOVW R30,R28
000224 9675      	ADIW R30,21
000225 8310      	ST   Z,R17
                 ; 0000 0139 
                 ; 0000 013A     DataDirection = 1;
000226 9a41      	SBI  0x8,1
                 ; 0000 013B 
                 ; 0000 013C     putchar(0x84);
000227 e8a4      	LDI  R26,LOW(132)
000228 d07b      	RCALL _putchar
                 ; 0000 013D     putchar(0xB3);
000229 eba3      	LDI  R26,LOW(179)
00022a d079      	RCALL _putchar
                 ; 0000 013E     putchar(0xE3);
00022b eea3      	LDI  R26,LOW(227)
00022c d077      	RCALL _putchar
                 ; 0000 013F     putchar(0x75);
00022d e7a5      	LDI  R26,LOW(117)
00022e d075      	RCALL _putchar
                 ; 0000 0140 
                 ; 0000 0141     for (i=0; i<10; i++)
00022f e000      	LDI  R16,LOW(0)
                 _0x16F:
000230 300a      	CPI  R16,10
000231 f428      	BRSH _0x170
                 ; 0000 0142         putchar(buff[i]);
000232 d0ac      	RCALL SUBOPT_0x9
000233 91ac      	LD   R26,X
000234 d06f      	RCALL _putchar
000235 5f0f      	SUBI R16,-1
000236 cff9      	RJMP _0x16F
                 _0x170:
                 ; 0000 0176 }
000237 d31c      	RCALL __LOADLOCR6
000238 96a0      	ADIW R28,32
000239 9508      	RET
                 ; .FEND
                 ;
                 
                 	.CSEG
                 _ds1820_select:
                 ; .FSTART _ds1820_select
00023a 93ba      	ST   -Y,R27
00023b 93aa      	ST   -Y,R26
00023c 931a      	ST   -Y,R17
00023d d0b2      	RCALL _w1_init
00023e 30e0      	CPI  R30,0
00023f f411      	BRNE _0x2000003
000240 e0e0      	LDI  R30,LOW(0)
000241 c015      	RJMP _0x2080005
                 _0x2000003:
000242 81e9      	LDD  R30,Y+1
000243 81fa      	LDD  R31,Y+1+1
000244 9730      	SBIW R30,0
000245 f071      	BREQ _0x2000004
000246 e5a5      	LDI  R26,LOW(85)
000247 d0ee      	RCALL _w1_write
000248 e010      	LDI  R17,LOW(0)
                 _0x2000006:
000249 81a9      	LDD  R26,Y+1
00024a 81ba      	LDD  R27,Y+1+1
00024b 91ed      	LD   R30,X+
00024c 83a9      	STD  Y+1,R26
00024d 83ba      	STD  Y+1+1,R27
00024e 2fae      	MOV  R26,R30
00024f d0e6      	RCALL _w1_write
000250 5f1f      	SUBI R17,-LOW(1)
000251 3018      	CPI  R17,8
000252 f3b0      	BRLO _0x2000006
000253 c002      	RJMP _0x2000008
                 _0x2000004:
000254 ecac      	LDI  R26,LOW(204)
000255 d0e0      	RCALL _w1_write
                 _0x2000008:
000256 e0e1      	LDI  R30,LOW(1)
                 _0x2080005:
000257 8118      	LDD  R17,Y+0
                 _0x2080006:
000258 9623      	ADIW R28,3
000259 9508      	RET
                 ; .FEND
                 _ds1820_read_spd:
                 ; .FSTART _ds1820_read_spd
00025a 93ba      	ST   -Y,R27
00025b 93aa      	ST   -Y,R26
00025c d2f2      	RCALL __SAVELOCR4
00025d 81ac      	LDD  R26,Y+4
00025e 81bd      	LDD  R27,Y+4+1
00025f dfda      	RCALL _ds1820_select
000260 30e0      	CPI  R30,0
000261 f411      	BRNE _0x2000009
000262 e0e0      	LDI  R30,LOW(0)
000263 c017      	RJMP _0x2080003
                 _0x2000009:
000264 ebae      	LDI  R26,LOW(190)
000265 d0d0      	RCALL _w1_write
000266 e010      	LDI  R17,LOW(0)
                +
000267 e925     +LDI R18 , LOW ( ___ds1820_scratch_pad )
000268 e031     +LDI R19 , HIGH ( ___ds1820_scratch_pad )
                 	__POINTWRM 18,19,___ds1820_scratch_pad
                 _0x200000B:
000269 933f      	PUSH R19
00026a 932f      	PUSH R18
                +
00026b 5f2f     +SUBI R18 , LOW ( - 1 )
00026c 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00026d d0c3      	RCALL _w1_read
00026e 91af      	POP  R26
00026f 91bf      	POP  R27
000270 93ec      	ST   X,R30
000271 5f1f      	SUBI R17,-LOW(1)
000272 3019      	CPI  R17,9
000273 f3a8      	BRLO _0x200000B
000274 e9e5      	LDI  R30,LOW(___ds1820_scratch_pad)
000275 e0f1      	LDI  R31,HIGH(___ds1820_scratch_pad)
000276 93fa      	ST   -Y,R31
000277 93ea      	ST   -Y,R30
000278 e0a9      	LDI  R26,LOW(9)
000279 d135      	RCALL _w1_dow_crc8
00027a d282      	RCALL __LNEGB1
                 _0x2080003:
00027b d2da      	RCALL __LOADLOCR4
                 _0x2080004:
00027c 9626      	ADIW R28,6
00027d 9508      	RET
                 ; .FEND
                 _ds1820_temperature_10:
                 ; .FSTART _ds1820_temperature_10
00027e 93ba      	ST   -Y,R27
00027f 93aa      	ST   -Y,R26
000280 81a8      	LD   R26,Y
000281 81b9      	LDD  R27,Y+1
000282 dfb7      	RCALL _ds1820_select
000283 30e0      	CPI  R30,0
000284 f419      	BRNE _0x200000D
000285 efe1      	LDI  R30,LOW(55537)
000286 edf8      	LDI  R31,HIGH(55537)
000287 c01a      	RJMP _0x2080002
                 _0x200000D:
000288 e4a4      	LDI  R26,LOW(68)
000289 d0ac      	RCALL _w1_write
00028a e2a6      	LDI  R26,LOW(550)
00028b e0b2      	LDI  R27,HIGH(550)
00028c d059      	RCALL _delay_ms
00028d 81a8      	LD   R26,Y
00028e 81b9      	LDD  R27,Y+1
00028f dfca      	RCALL _ds1820_read_spd
000290 30e0      	CPI  R30,0
000291 f419      	BRNE _0x200000E
000292 efe1      	LDI  R30,LOW(55537)
000293 edf8      	LDI  R31,HIGH(55537)
000294 c00d      	RJMP _0x2080002
                 _0x200000E:
000295 d05a      	RCALL _w1_init
                +
000296 91f0 0196+LDS R31 , ___ds1820_scratch_pad + ( 1 )
                 	__GETB1HMN ___ds1820_scratch_pad,1
000298 e0e0      	LDI  R30,LOW(0)
000299 01df      	MOVW R26,R30
00029a 91e0 0195 	LDS  R30,___ds1820_scratch_pad
00029c e0f0      	LDI  R31,0
00029d 2bea      	OR   R30,R26
00029e 2bfb      	OR   R31,R27
00029f e0a5      	LDI  R26,LOW(5)
0002a0 e0b0      	LDI  R27,HIGH(5)
0002a1 d268      	RCALL __MULW12
                 _0x2080002:
0002a2 9622      	ADIW R28,2
0002a3 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0002a4 93aa      	ST   -Y,R26
                 _0x2020003:
0002a5 91e0 00c0 	LDS  R30,192
0002a7 72e0      	ANDI R30,LOW(0x20)
0002a8 f3e1      	BREQ _0x2020003
0002a9 81e8      	LD   R30,Y
0002aa 93e0 00c6 	STS  198,R30
                 _0x2080001:
0002ac 9621      	ADIW R28,1
0002ad 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rom_codes:
000180           	.BYTE 0x9
                 _T1:
000189           	.BYTE 0x4
                 _T2:
00018d           	.BYTE 0x4
                 _format_converter_32:
000191           	.BYTE 0x4
                 ___ds1820_scratch_pad:
000195           	.BYTE 0x9
                 _rx_buffer0:
00019e           	.BYTE 0x100
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0002ae 91a0 0189 	LDS  R26,_T1
0002b0 91b0 018a 	LDS  R27,_T1+1
0002b2 9180 018b 	LDS  R24,_T1+2
0002b4 9190 018c 	LDS  R25,_T1+3
0002b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0002b7 81aa      	LDD  R26,Y+2
0002b8 e0b0      	LDI  R27,0
0002b9 fda7      	SBRC R26,7
0002ba efbf      	SER  R27
0002bb e0ea      	LDI  R30,LOW(10)
0002bc e0f0      	LDI  R31,HIGH(10)
0002bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0002be 9828      	CBI  0x5,0
0002bf 9829      	CBI  0x5,1
0002c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0002c1 985a      	CBI  0xB,2
0002c2 985c      	CBI  0xB,4
0002c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0002c4 9a28      	SBI  0x5,0
0002c5 9829      	CBI  0x5,1
0002c6 985a      	CBI  0xB,2
0002c7 9a5c      	SBI  0xB,4
0002c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0002c9 982c      	CBI  0x5,4
0002ca 982d      	CBI  0x5,5
0002cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0002cc 9842      	CBI  0x8,2
0002cd 9843      	CBI  0x8,3
0002ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0002cf 9a2c      	SBI  0x5,4
0002d0 982d      	CBI  0x5,5
0002d1 9842      	CBI  0x8,2
0002d2 9a43      	SBI  0x8,3
0002d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
0002d4 93e0 0191 	STS  _format_converter_32,R30
0002d6 93f0 0192 	STS  _format_converter_32+1,R31
0002d8 9360 0193 	STS  _format_converter_32+2,R22
0002da 9370 0194 	STS  _format_converter_32+3,R23
0002dc 91e0 0191 	LDS  R30,_format_converter_32
0002de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
0002df 2fe0      	MOV  R30,R16
0002e0 e0f0      	LDI  R31,0
0002e1 01de      	MOVW R26,R28
0002e2 961c      	ADIW R26,12
0002e3 0fae      	ADD  R26,R30
0002e4 1fbf      	ADC  R27,R31
0002e5 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002e6 9610      	adiw r26,0
0002e7 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002e8 ee88     +LDI R24 , LOW ( 0x3E8 )
0002e9 e093     +LDI R25 , HIGH ( 0x3E8 )
                +__DELAY_USW_LOOP :
0002ea 9701     +SBIW R24 , 1
0002eb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3E8
0002ec 95a8      	wdr
0002ed 9711      	sbiw r26,1
0002ee f7c9      	brne __delay_ms0
                 __delay_ms1:
0002ef 9508      	ret
                 
                 	.equ __w1_port=0x08
                 	.equ __w1_bit=0x00
                 
                 _w1_init:
0002f0 27ee      	clr  r30
0002f1 9840      	cbi  __w1_port,__w1_bit
0002f2 9a38      	sbi  __w1_port-1,__w1_bit
                +
0002f3 ee80     +LDI R24 , LOW ( 0x1E0 )
0002f4 e091     +LDI R25 , HIGH ( 0x1E0 )
                +__DELAY_USW_LOOP :
0002f5 9701     +SBIW R24 , 1
0002f6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1E0
0002f7 9838      	cbi  __w1_port-1,__w1_bit
                +
0002f8 e183     +LDI R24 , LOW ( 0x13 )
                +__DELAY_USB_LOOP :
0002f9 958a     +DEC R24
0002fa f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x13
0002fb 9b30      	sbis __w1_port-2,__w1_bit
0002fc 9508      	ret
                +
0002fd e685     +LDI R24 , LOW ( 0x65 )
                +__DELAY_USB_LOOP :
0002fe 958a     +DEC R24
0002ff f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x65
000300 9b30      	sbis __w1_port-2,__w1_bit
000301 e0e1      	ldi  r30,1
                +
000302 e886     +LDI R24 , LOW ( 0x186 )
000303 e091     +LDI R25 , HIGH ( 0x186 )
                +__DELAY_USW_LOOP :
000304 9701     +SBIW R24 , 1
000305 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x186
000306 9508      	ret
                 
                 __w1_read_bit:
000307 9a38      	sbi  __w1_port-1,__w1_bit
                +
000308 e083     +LDI R24 , LOW ( 0x3 )
                +__DELAY_USB_LOOP :
000309 958a     +DEC R24
00030a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x3
00030b 9838      	cbi  __w1_port-1,__w1_bit
                +
00030c e08f     +LDI R24 , LOW ( 0xF )
                +__DELAY_USB_LOOP :
00030d 958a     +DEC R24
00030e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xF
00030f 9488      	clc
000310 9930      	sbic __w1_port-2,__w1_bit
000311 9408      	sec
000312 95e7      	ror  r30
                +
000313 e68b     +LDI R24 , LOW ( 0x6B )
                +__DELAY_USB_LOOP :
000314 958a     +DEC R24
000315 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x6B
000316 9508      	ret
                 
                 __w1_write_bit:
000317 94e8      	clt
000318 9a38      	sbi  __w1_port-1,__w1_bit
                +
000319 e083     +LDI R24 , LOW ( 0x3 )
                +__DELAY_USB_LOOP :
00031a 958a     +DEC R24
00031b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x3
00031c fd70      	sbrc r23,0
00031d 9838      	cbi  __w1_port-1,__w1_bit
                +
00031e e181     +LDI R24 , LOW ( 0x11 )
                +__DELAY_USB_LOOP :
00031f 958a     +DEC R24
000320 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x11
000321 9930      	sbic __w1_port-2,__w1_bit
000322 c003      	rjmp __w1_write_bit0
000323 ff70      	sbrs r23,0
000324 c003      	rjmp __w1_write_bit1
000325 9508      	ret
                 __w1_write_bit0:
000326 ff70      	sbrs r23,0
000327 9508      	ret
                 __w1_write_bit1:
                +
000328 e684     +LDI R24 , LOW ( 0x64 )
                +__DELAY_USB_LOOP :
000329 958a     +DEC R24
00032a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x64
00032b 9838      	cbi  __w1_port-1,__w1_bit
                +
00032c e087     +LDI R24 , LOW ( 0x7 )
                +__DELAY_USB_LOOP :
00032d 958a     +DEC R24
00032e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x7
00032f 9468      	set
000330 9508      	ret
                 
                 _w1_read:
000331 e068      	ldi  r22,8
                 	__w1_read0:
000332 dfd4      	rcall __w1_read_bit
000333 956a      	dec  r22
000334 f7e9      	brne __w1_read0
000335 9508      	ret
                 
                 _w1_write:
000336 2f7a      	mov  r23,r26
000337 e068      	ldi  r22,8
000338 27ee      	clr  r30
                 __w1_write0:
000339 dfdd      	rcall __w1_write_bit
00033a f426      	brtc __w1_write1
00033b 9577      	ror  r23
00033c 956a      	dec  r22
00033d f7d9      	brne __w1_write0
00033e 95e3      	inc  r30
                 __w1_write1:
00033f 9508      	ret
                 
                 _w1_search:
000340 934f      	push r20
000341 935f      	push r21
000342 2411      	clr  r1
000343 2744      	clr  r20
                 __w1_search0:
000344 2c01      	mov  r0,r1
000345 2411      	clr  r1
000346 dfa9      	rcall _w1_init
000347 23ee      	tst  r30
000348 f101      	breq __w1_search7
000349 93af      	push r26
00034a 81a8      	ld   r26,y
00034b dfea      	rcall _w1_write
00034c 91af      	pop  r26
00034d e051      	ldi  r21,1
                 __w1_search1:
00034e 1550      	cp   r21,r0
00034f f498      	brsh __w1_search6
000350 dfb6      	rcall __w1_read_bit
000351 fde7      	sbrc r30,7
000352 c008      	rjmp __w1_search2
000353 dfb3      	rcall __w1_read_bit
000354 fde7      	sbrc r30,7
000355 c006      	rjmp __w1_search3
000356 d03f      	rcall __sel_bit
000357 2389      	and  r24,r25
000358 f419      	brne __w1_search3
000359 2e15      	mov  r1,r21
00035a c001      	rjmp __w1_search3
                 __w1_search2:
00035b dfab      	rcall __w1_read_bit
                 __w1_search3:
00035c d039      	rcall __sel_bit
00035d 2389      	and  r24,r25
00035e e070      	ldi  r23,0
00035f f009      	breq __w1_search5
                 __w1_search4:
000360 e071      	ldi  r23,1
                 __w1_search5:
000361 dfb5      	rcall __w1_write_bit
000362 c01e      	rjmp __w1_search13
                 __w1_search6:
000363 dfa3      	rcall __w1_read_bit
000364 ffe7      	sbrs r30,7
000365 c00b      	rjmp __w1_search9
000366 dfa0      	rcall __w1_read_bit
000367 ffe7      	sbrs r30,7
000368 c005      	rjmp __w1_search8
                 __w1_search7:
000369 2fe4      	mov  r30,r20
00036a 915f      	pop  r21
00036b 914f      	pop  r20
00036c 9621      	adiw r28,1
00036d 9508      	ret
                 __w1_search8:
00036e 9468      	set
00036f d037      	rcall __set_bit
000370 cfef      	rjmp __w1_search4
                 __w1_search9:
000371 df95      	rcall __w1_read_bit
000372 ffe7      	sbrs r30,7
000373 c001      	rjmp __w1_search10
000374 c003      	rjmp __w1_search11
                 __w1_search10:
000375 1550      	cp   r21,r0
000376 f031      	breq __w1_search12
000377 2e15      	mov  r1,r21
                 __w1_search11:
000378 94e8      	clt
000379 d02d      	rcall __set_bit
00037a 2777      	clr  r23
00037b df9b      	rcall __w1_write_bit
00037c c004      	rjmp __w1_search13
                 __w1_search12:
00037d 9468      	set
00037e d028      	rcall __set_bit
00037f e071      	ldi  r23,1
000380 df96      	rcall __w1_write_bit
                 __w1_search13:
000381 9553      	inc  r21
000382 3451      	cpi  r21,65
000383 f254      	brlt __w1_search1
000384 df82      	rcall __w1_read_bit
000385 1fee      	rol  r30
000386 1fee      	rol  r30
000387 70e1      	andi r30,1
000388 9618      	adiw r26,8
000389 93ec      	st   x,r30
00038a 9718      	sbiw r26,8
00038b 9543      	inc  r20
00038c 2011      	tst  r1
00038d f2d9      	breq __w1_search7
00038e e059      	ldi  r21,9
                 __w1_search14:
00038f 91ec      	ld   r30,x
000390 9619      	adiw r26,9
000391 93ec      	st   x,r30
000392 9718      	sbiw r26,8
000393 955a      	dec  r21
000394 f7d1      	brne __w1_search14
000395 cfae      	rjmp __w1_search0
                 
                 __sel_bit:
000396 2fe5      	mov  r30,r21
000397 95ea      	dec  r30
000398 2f6e      	mov  r22,r30
000399 95e6      	lsr  r30
00039a 95e6      	lsr  r30
00039b 95e6      	lsr  r30
00039c 27ff      	clr  r31
00039d 0fea      	add  r30,r26
00039e 1ffb      	adc  r31,r27
00039f 8180      	ld   r24,z
0003a0 e091      	ldi  r25,1
0003a1 7067      	andi r22,7
                 __sel_bit0:
0003a2 f019      	breq __sel_bit1
0003a3 0f99      	lsl  r25
0003a4 956a      	dec  r22
0003a5 cffc      	rjmp __sel_bit0
                 __sel_bit1:
0003a6 9508      	ret
                 
                 __set_bit:
0003a7 dfee      	rcall __sel_bit
0003a8 f01e      	brts __set_bit2
0003a9 9590      	com  r25
0003aa 2389      	and  r24,r25
0003ab c001      	rjmp __set_bit3
                 __set_bit2:
0003ac 2b89      	or   r24,r25
                 __set_bit3:
0003ad 8380      	st   z,r24
0003ae 9508      	ret
                 
                 _w1_dow_crc8:
0003af 27ee      	clr  r30
0003b0 23aa      	tst  r26
0003b1 f089      	breq __w1_dow_crc83
0003b2 2f8a      	mov  r24,r26
0003b3 e168      	ldi  r22,0x18
0003b4 81a8      	ld   r26,y
0003b5 81b9      	ldd  r27,y+1
                 __w1_dow_crc80:
0003b6 e098      	ldi  r25,8
0003b7 91fd      	ld   r31,x+
                 __w1_dow_crc81:
0003b8 2f7f      	mov  r23,r31
0003b9 277e      	eor  r23,r30
0003ba 9577      	ror  r23
0003bb f408      	brcc __w1_dow_crc82
0003bc 27e6      	eor  r30,r22
                 __w1_dow_crc82:
0003bd 95e7      	ror  r30
0003be 95f6      	lsr  r31
0003bf 959a      	dec  r25
0003c0 f7b9      	brne __w1_dow_crc81
0003c1 958a      	dec  r24
0003c2 f799      	brne __w1_dow_crc80
                 __w1_dow_crc83:
0003c3 9622      	adiw r28,2
0003c4 9508      	ret
                 
                 __ROUND_REPACK:
0003c5 2355      	TST  R21
0003c6 f442      	BRPL __REPACK
0003c7 3850      	CPI  R21,0x80
0003c8 f411      	BRNE __ROUND_REPACK0
0003c9 ffe0      	SBRS R30,0
0003ca c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0003cb 9631      	ADIW R30,1
0003cc 1f69      	ADC  R22,R25
0003cd 1f79      	ADC  R23,R25
0003ce f06b      	BRVS __REPACK1
                 
                 __REPACK:
0003cf e850      	LDI  R21,0x80
0003d0 2757      	EOR  R21,R23
0003d1 f411      	BRNE __REPACK0
0003d2 935f      	PUSH R21
0003d3 c073      	RJMP __ZERORES
                 __REPACK0:
0003d4 3f5f      	CPI  R21,0xFF
0003d5 f031      	BREQ __REPACK1
0003d6 0f66      	LSL  R22
0003d7 0c00      	LSL  R0
0003d8 9557      	ROR  R21
0003d9 9567      	ROR  R22
0003da 2f75      	MOV  R23,R21
0003db 9508      	RET
                 __REPACK1:
0003dc 935f      	PUSH R21
0003dd 2000      	TST  R0
0003de f00a      	BRMI __REPACK2
0003df c073      	RJMP __MAXRES
                 __REPACK2:
0003e0 c06c      	RJMP __MINRES
                 
                 __UNPACK:
0003e1 e850      	LDI  R21,0x80
0003e2 2e19      	MOV  R1,R25
0003e3 2215      	AND  R1,R21
0003e4 0f88      	LSL  R24
0003e5 1f99      	ROL  R25
0003e6 2795      	EOR  R25,R21
0003e7 0f55      	LSL  R21
0003e8 9587      	ROR  R24
                 
                 __UNPACK1:
0003e9 e850      	LDI  R21,0x80
0003ea 2e07      	MOV  R0,R23
0003eb 2205      	AND  R0,R21
0003ec 0f66      	LSL  R22
0003ed 1f77      	ROL  R23
0003ee 2775      	EOR  R23,R21
0003ef 0f55      	LSL  R21
0003f0 9567      	ROR  R22
0003f1 9508      	RET
                 
                 __CFD1U:
0003f2 9468      	SET
0003f3 c001      	RJMP __CFD1U0
                 __CFD1:
0003f4 94e8      	CLT
                 __CFD1U0:
0003f5 935f      	PUSH R21
0003f6 dff2      	RCALL __UNPACK1
0003f7 3870      	CPI  R23,0x80
0003f8 f018      	BRLO __CFD10
0003f9 3f7f      	CPI  R23,0xFF
0003fa f408      	BRCC __CFD10
0003fb c04b      	RJMP __ZERORES
                 __CFD10:
0003fc e156      	LDI  R21,22
0003fd 1b57      	SUB  R21,R23
0003fe f4aa      	BRPL __CFD11
0003ff 9551      	NEG  R21
000400 3058      	CPI  R21,8
000401 f40e      	BRTC __CFD19
000402 3059      	CPI  R21,9
                 __CFD19:
000403 f030      	BRLO __CFD17
000404 efef      	SER  R30
000405 efff      	SER  R31
000406 ef6f      	SER  R22
000407 e77f      	LDI  R23,0x7F
000408 f977      	BLD  R23,7
000409 c01a      	RJMP __CFD15
                 __CFD17:
00040a 2777      	CLR  R23
00040b 2355      	TST  R21
00040c f0b9      	BREQ __CFD15
                 __CFD18:
00040d 0fee      	LSL  R30
00040e 1fff      	ROL  R31
00040f 1f66      	ROL  R22
000410 1f77      	ROL  R23
000411 955a      	DEC  R21
000412 f7d1      	BRNE __CFD18
000413 c010      	RJMP __CFD15
                 __CFD11:
000414 2777      	CLR  R23
                 __CFD12:
000415 3058      	CPI  R21,8
000416 f028      	BRLO __CFD13
000417 2fef      	MOV  R30,R31
000418 2ff6      	MOV  R31,R22
000419 2f67      	MOV  R22,R23
00041a 5058      	SUBI R21,8
00041b cff9      	RJMP __CFD12
                 __CFD13:
00041c 2355      	TST  R21
00041d f031      	BREQ __CFD15
                 __CFD14:
00041e 9576      	LSR  R23
00041f 9567      	ROR  R22
000420 95f7      	ROR  R31
000421 95e7      	ROR  R30
000422 955a      	DEC  R21
000423 f7d1      	BRNE __CFD14
                 __CFD15:
000424 2000      	TST  R0
000425 f40a      	BRPL __CFD16
000426 d0c9      	RCALL __ANEGD1
                 __CFD16:
000427 915f      	POP  R21
000428 9508      	RET
                 
                 __CDF1U:
000429 9468      	SET
00042a c001      	RJMP __CDF1U0
                 __CDF1:
00042b 94e8      	CLT
                 __CDF1U0:
00042c 9730      	SBIW R30,0
00042d 4060      	SBCI R22,0
00042e 4070      	SBCI R23,0
00042f f0b1      	BREQ __CDF10
000430 2400      	CLR  R0
000431 f026      	BRTS __CDF11
000432 2377      	TST  R23
000433 f412      	BRPL __CDF11
000434 9400      	COM  R0
000435 d0ba      	RCALL __ANEGD1
                 __CDF11:
000436 2e17      	MOV  R1,R23
000437 e17e      	LDI  R23,30
000438 2011      	TST  R1
                 __CDF12:
000439 f032      	BRMI __CDF13
00043a 957a      	DEC  R23
00043b 0fee      	LSL  R30
00043c 1fff      	ROL  R31
00043d 1f66      	ROL  R22
00043e 1c11      	ROL  R1
00043f cff9      	RJMP __CDF12
                 __CDF13:
000440 2fef      	MOV  R30,R31
000441 2ff6      	MOV  R31,R22
000442 2d61      	MOV  R22,R1
000443 935f      	PUSH R21
000444 df8a      	RCALL __REPACK
000445 915f      	POP  R21
                 __CDF10:
000446 9508      	RET
                 
                 __ZERORES:
000447 27ee      	CLR  R30
000448 27ff      	CLR  R31
000449 2766      	CLR  R22
00044a 2777      	CLR  R23
00044b 915f      	POP  R21
00044c 9508      	RET
                 
                 __MINRES:
00044d efef      	SER  R30
00044e efff      	SER  R31
00044f e76f      	LDI  R22,0x7F
000450 ef7f      	SER  R23
000451 915f      	POP  R21
000452 9508      	RET
                 
                 __MAXRES:
000453 efef      	SER  R30
000454 efff      	SER  R31
000455 e76f      	LDI  R22,0x7F
000456 e77f      	LDI  R23,0x7F
000457 915f      	POP  R21
000458 9508      	RET
                 
                 __MULF12:
000459 935f      	PUSH R21
00045a df86      	RCALL __UNPACK
00045b 3870      	CPI  R23,0x80
00045c f351      	BREQ __ZERORES
00045d 3890      	CPI  R25,0x80
00045e f341      	BREQ __ZERORES
00045f 2401      	EOR  R0,R1
000460 9408      	SEC
000461 1f79      	ADC  R23,R25
000462 f423      	BRVC __MULF124
000463 f31c      	BRLT __ZERORES
                 __MULF125:
000464 2000      	TST  R0
000465 f33a      	BRMI __MINRES
000466 cfec      	RJMP __MAXRES
                 __MULF124:
000467 920f      	PUSH R0
000468 931f      	PUSH R17
000469 932f      	PUSH R18
00046a 933f      	PUSH R19
00046b 934f      	PUSH R20
00046c 2711      	CLR  R17
00046d 2722      	CLR  R18
00046e 2799      	CLR  R25
00046f 9f68      	MUL  R22,R24
000470 01a0      	MOVW R20,R0
000471 9f8f      	MUL  R24,R31
000472 2d30      	MOV  R19,R0
000473 0d41      	ADD  R20,R1
000474 1f59      	ADC  R21,R25
000475 9f6b      	MUL  R22,R27
000476 0d30      	ADD  R19,R0
000477 1d41      	ADC  R20,R1
000478 1f59      	ADC  R21,R25
000479 9f8e      	MUL  R24,R30
00047a d027      	RCALL __MULF126
00047b 9fbf      	MUL  R27,R31
00047c d025      	RCALL __MULF126
00047d 9f6a      	MUL  R22,R26
00047e d023      	RCALL __MULF126
00047f 9fbe      	MUL  R27,R30
000480 d01d      	RCALL __MULF127
000481 9faf      	MUL  R26,R31
000482 d01b      	RCALL __MULF127
000483 9fae      	MUL  R26,R30
000484 0d11      	ADD  R17,R1
000485 1f29      	ADC  R18,R25
000486 1f39      	ADC  R19,R25
000487 1f49      	ADC  R20,R25
000488 1f59      	ADC  R21,R25
000489 2fe3      	MOV  R30,R19
00048a 2ff4      	MOV  R31,R20
00048b 2f65      	MOV  R22,R21
00048c 2f52      	MOV  R21,R18
00048d 914f      	POP  R20
00048e 913f      	POP  R19
00048f 912f      	POP  R18
000490 911f      	POP  R17
000491 900f      	POP  R0
000492 2366      	TST  R22
000493 f02a      	BRMI __MULF122
000494 0f55      	LSL  R21
000495 1fee      	ROL  R30
000496 1fff      	ROL  R31
000497 1f66      	ROL  R22
000498 c002      	RJMP __MULF123
                 __MULF122:
000499 9573      	INC  R23
00049a f24b      	BRVS __MULF125
                 __MULF123:
00049b df29      	RCALL __ROUND_REPACK
00049c 915f      	POP  R21
00049d 9508      	RET
                 
                 __MULF127:
00049e 0d10      	ADD  R17,R0
00049f 1d21      	ADC  R18,R1
0004a0 1f39      	ADC  R19,R25
0004a1 c002      	RJMP __MULF128
                 __MULF126:
0004a2 0d20      	ADD  R18,R0
0004a3 1d31      	ADC  R19,R1
                 __MULF128:
0004a4 1f49      	ADC  R20,R25
0004a5 1f59      	ADC  R21,R25
0004a6 9508      	RET
                 
                 __DIVF21:
0004a7 935f      	PUSH R21
0004a8 df38      	RCALL __UNPACK
0004a9 3870      	CPI  R23,0x80
0004aa f421      	BRNE __DIVF210
0004ab 2011      	TST  R1
                 __DIVF211:
0004ac f40a      	BRPL __DIVF219
0004ad cf9f      	RJMP __MINRES
                 __DIVF219:
0004ae cfa4      	RJMP __MAXRES
                 __DIVF210:
0004af 3890      	CPI  R25,0x80
0004b0 f409      	BRNE __DIVF218
                 __DIVF217:
0004b1 cf95      	RJMP __ZERORES
                 __DIVF218:
0004b2 2401      	EOR  R0,R1
0004b3 9408      	SEC
0004b4 0b97      	SBC  R25,R23
0004b5 f41b      	BRVC __DIVF216
0004b6 f3d4      	BRLT __DIVF217
0004b7 2000      	TST  R0
0004b8 cff3      	RJMP __DIVF211
                 __DIVF216:
0004b9 2f79      	MOV  R23,R25
0004ba 931f      	PUSH R17
0004bb 932f      	PUSH R18
0004bc 933f      	PUSH R19
0004bd 934f      	PUSH R20
0004be 2411      	CLR  R1
0004bf 2711      	CLR  R17
0004c0 2722      	CLR  R18
0004c1 2733      	CLR  R19
0004c2 2744      	CLR  R20
0004c3 2755      	CLR  R21
0004c4 e290      	LDI  R25,32
                 __DIVF212:
0004c5 17ae      	CP   R26,R30
0004c6 07bf      	CPC  R27,R31
0004c7 0786      	CPC  R24,R22
0004c8 0741      	CPC  R20,R17
0004c9 f030      	BRLO __DIVF213
0004ca 1bae      	SUB  R26,R30
0004cb 0bbf      	SBC  R27,R31
0004cc 0b86      	SBC  R24,R22
0004cd 0b41      	SBC  R20,R17
0004ce 9408      	SEC
0004cf c001      	RJMP __DIVF214
                 __DIVF213:
0004d0 9488      	CLC
                 __DIVF214:
0004d1 1f55      	ROL  R21
0004d2 1f22      	ROL  R18
0004d3 1f33      	ROL  R19
0004d4 1c11      	ROL  R1
0004d5 1faa      	ROL  R26
0004d6 1fbb      	ROL  R27
0004d7 1f88      	ROL  R24
0004d8 1f44      	ROL  R20
0004d9 959a      	DEC  R25
0004da f751      	BRNE __DIVF212
0004db 01f9      	MOVW R30,R18
0004dc 2d61      	MOV  R22,R1
0004dd 914f      	POP  R20
0004de 913f      	POP  R19
0004df 912f      	POP  R18
0004e0 911f      	POP  R17
0004e1 2366      	TST  R22
0004e2 f032      	BRMI __DIVF215
0004e3 0f55      	LSL  R21
0004e4 1fee      	ROL  R30
0004e5 1fff      	ROL  R31
0004e6 1f66      	ROL  R22
0004e7 957a      	DEC  R23
0004e8 f243      	BRVS __DIVF217
                 __DIVF215:
0004e9 dedb      	RCALL __ROUND_REPACK
0004ea 915f      	POP  R21
0004eb 9508      	RET
                 
                 __ANEGW1:
0004ec 95f1      	NEG  R31
0004ed 95e1      	NEG  R30
0004ee 40f0      	SBCI R31,0
0004ef 9508      	RET
                 
                 __ANEGD1:
0004f0 95f0      	COM  R31
0004f1 9560      	COM  R22
0004f2 9570      	COM  R23
0004f3 95e1      	NEG  R30
0004f4 4fff      	SBCI R31,-1
0004f5 4f6f      	SBCI R22,-1
0004f6 4f7f      	SBCI R23,-1
0004f7 9508      	RET
                 
                 __CWD1:
0004f8 2f6f      	MOV  R22,R31
0004f9 0f66      	ADD  R22,R22
0004fa 0b66      	SBC  R22,R22
0004fb 2f76      	MOV  R23,R22
0004fc 9508      	RET
                 
                 __LNEGB1:
0004fd 23ee      	TST  R30
0004fe e0e1      	LDI  R30,1
0004ff f009      	BREQ __LNEGB1F
000500 27ee      	CLR  R30
                 __LNEGB1F:
000501 9508      	RET
                 
                 __MULW12U:
000502 9ffa      	MUL  R31,R26
000503 2df0      	MOV  R31,R0
000504 9feb      	MUL  R30,R27
000505 0df0      	ADD  R31,R0
000506 9fea      	MUL  R30,R26
000507 2de0      	MOV  R30,R0
000508 0df1      	ADD  R31,R1
000509 9508      	RET
                 
                 __MULW12:
00050a d02a      	RCALL __CHKSIGNW
00050b dff6      	RCALL __MULW12U
00050c f40e      	BRTC __MULW121
00050d dfde      	RCALL __ANEGW1
                 __MULW121:
00050e 9508      	RET
                 
                 __DIVW21U:
00050f 2400      	CLR  R0
000510 2411      	CLR  R1
000511 e190      	LDI  R25,16
                 __DIVW21U1:
000512 0faa      	LSL  R26
000513 1fbb      	ROL  R27
000514 1c00      	ROL  R0
000515 1c11      	ROL  R1
000516 1a0e      	SUB  R0,R30
000517 0a1f      	SBC  R1,R31
000518 f418      	BRCC __DIVW21U2
000519 0e0e      	ADD  R0,R30
00051a 1e1f      	ADC  R1,R31
00051b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00051c 60a1      	SBR  R26,1
                 __DIVW21U3:
00051d 959a      	DEC  R25
00051e f799      	BRNE __DIVW21U1
00051f 01fd      	MOVW R30,R26
000520 01d0      	MOVW R26,R0
000521 9508      	RET
                 
                 __DIVW21:
000522 d012      	RCALL __CHKSIGNW
000523 dfeb      	RCALL __DIVW21U
000524 f40e      	BRTC __DIVW211
000525 dfc6      	RCALL __ANEGW1
                 __DIVW211:
000526 9508      	RET
                 
                 __MODW21:
000527 94e8      	CLT
000528 ffb7      	SBRS R27,7
000529 c004      	RJMP __MODW211
00052a 95a0      	COM  R26
00052b 95b0      	COM  R27
00052c 9611      	ADIW R26,1
00052d 9468      	SET
                 __MODW211:
00052e fdf7      	SBRC R31,7
00052f dfbc      	RCALL __ANEGW1
000530 dfde      	RCALL __DIVW21U
000531 01fd      	MOVW R30,R26
000532 f40e      	BRTC __MODW212
000533 dfb8      	RCALL __ANEGW1
                 __MODW212:
000534 9508      	RET
                 
                 __CHKSIGNW:
000535 94e8      	CLT
000536 fff7      	SBRS R31,7
000537 c002      	RJMP __CHKSW1
000538 dfb3      	RCALL __ANEGW1
000539 9468      	SET
                 __CHKSW1:
00053a ffb7      	SBRS R27,7
00053b c006      	RJMP __CHKSW2
00053c 95a0      	COM  R26
00053d 95b0      	COM  R27
00053e 9611      	ADIW R26,1
00053f f800      	BLD  R0,0
000540 9403      	INC  R0
000541 fa00      	BST  R0,0
                 __CHKSW2:
000542 9508      	RET
                 
                 __PUTDP1:
000543 93ed      	ST   X+,R30
000544 93fd      	ST   X+,R31
000545 936d      	ST   X+,R22
000546 937c      	ST   X,R23
000547 9508      	RET
                 
                 __PUTPARD2:
000548 939a      	ST   -Y,R25
000549 938a      	ST   -Y,R24
00054a 93ba      	ST   -Y,R27
00054b 93aa      	ST   -Y,R26
00054c 9508      	RET
                 
                 __SAVELOCR6:
00054d 935a      	ST   -Y,R21
                 __SAVELOCR5:
00054e 934a      	ST   -Y,R20
                 __SAVELOCR4:
00054f 933a      	ST   -Y,R19
                 __SAVELOCR3:
000550 932a      	ST   -Y,R18
                 __SAVELOCR2:
000551 931a      	ST   -Y,R17
000552 930a      	ST   -Y,R16
000553 9508      	RET
                 
                 __LOADLOCR6:
000554 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000555 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000556 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000557 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000558 8119      	LDD  R17,Y+1
000559 8108      	LD   R16,Y
00055a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega48A register use summary:
r0 :  36 r1 :  29 r2 :   0 r3 :   5 r4 :   0 r5 :   0 r6 :   2 r7 :   2 
r8 :   2 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  21 r17:  30 r18:  17 r19:  17 r20:  21 r21:  63 r22:  54 r23:  53 
r24:  52 r25:  41 r26: 122 r27:  40 r28:  13 r29:   1 r30: 241 r31:  83 
x  :  15 y  :  71 z  :  12 
Registers used: 25 out of 35 (71.4%)

ATmega48A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :  11 
adiw  :  17 and   :   7 andi  :   5 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  19 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   3 brmi  :   5 brne  :  57 brpl  :   5 brsh  :   4 brtc  :   5 
brts  :   2 brvc  :   2 brvs  :   3 bset  :   0 bst   :   1 cbi   :  45 
cbr   :   0 clc   :   2 clh   :   0 cli   :   1 cln   :   0 clr   :  29 
cls   :   0 clt   :   6 clv   :   0 clz   :   0 com   :   9 cp    :   3 
cpc   :  23 cpi   :  45 cpse  :   0 dec   :  24 des   :   0 eor   :   8 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :   6 ld    :  18 ldd   :  22 ldi   : 156 lds   :  28 lpm   :   7 
lsl   :  12 lsr   :   5 mov   :  45 movw  :  14 mul   :  12 muls  :   0 
mulsu :   0 neg   :   4 nop   :   0 or    :   5 ori   :   3 out   :  12 
pop   :  21 push  :  20 rcall : 127 ret   :  52 reti  :   1 rjmp  : 101 
rol   :  27 ror   :  11 sbc   :   6 sbci  :   8 sbi   :  41 sbic  :   2 
sbis  :   2 sbiw  :  15 sbr   :   1 sbrc  :   5 sbrs  :   9 sec   :   4 
seh   :   0 sei   :   1 sen   :   0 ser   :   9 ses   :   0 set   :   7 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  40 std   :  11 
sts   :  27 sub   :   4 subi  :   7 swap  :   0 tst   :  16 wdr   :   1 

Instructions used: 75 out of 114 (65.8%)

ATmega48A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000ab6   2712     30   2742    4096  66.9%
[.dseg] 0x000100 0x00029e      0    286    286     512  55.9%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 6 warnings
